using System;
using System.Net;
using DockerSdk.Core;

namespace DockerSdk
{
    /// <summary>
    /// Base class for exceptions that are specific to the Docker client's functionality.
    /// </summary>
    [Serializable]
    public class DockerException : Exception
    {
        /// <summary>
        /// Creates of instance of the DockerException type.
        /// </summary>
        public DockerException()
        {
        }

        /// <summary>
        /// Creates of instance of the DockerException type.
        /// </summary>
        public DockerException(string message) : base(message)
        {
        }

        /// <summary>
        /// Creates of instance of the DockerException type.
        /// </summary>
        public DockerException(string message, Exception inner)
            : base(message + " See inner exception for details.", inner)
        {
        }

        /// <summary>
        /// Creates of instance of the DockerException type.
        /// </summary>
        protected DockerException(
          System.Runtime.Serialization.SerializationInfo info,
          System.Runtime.Serialization.StreamingContext context) : base(info, context) { }

        /// <summary>
        /// Creates a friendlier exception from an exception generated by the core API.
        /// </summary>
        /// <param name="ex">The exception from the core API.</param>
        /// <returns>The wrapper exception.</returns>
        internal static DockerException Wrap(Core.DockerApiException ex)
            => ex.StatusCode switch
            {
                HttpStatusCode.BadRequest => new DockerException("The Docker daemon rejected the request because of an invalid value or invalid combination of values.", ex),
                HttpStatusCode.InternalServerError => new DockerException("The Docker daemon reported an internal error.", ex),
                _ => new DockerException($"The Docker daemon responded with unexpected status code {(int)ex.StatusCode}.", ex),
            };
    }
}
