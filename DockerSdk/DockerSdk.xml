<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DockerSdk</name>
    </assembly>
    <members>
        <member name="M:DockerSdk.CertificateLoader.Load(System.String)">
            <summary>
            Loads certificates from a file.
            </summary>
            <param name="path">The file to load from.</param>
            <returns>The resultant collection of certificates.</returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The file did not represent a valid certificate.</exception>
        </member>
        <member name="T:DockerSdk.ClientOptions">
            <summary>
            Specifies where to find a Docker daemon and how the SDK should connect to it.
            </summary>
            <seealso cref="T:DockerSdk.DockerClient"/>
        </member>
        <member name="P:DockerSdk.ClientOptions.Certificates">
            <summary>
            Gets or sets the set of certificates to use when communicating with the daemon.
            </summary>
        </member>
        <member name="P:DockerSdk.ClientOptions.Credentials">
            <summary>
            Gets or sets the credentials to use for connecting to the Docker daemon.
            </summary>
        </member>
        <member name="P:DockerSdk.ClientOptions.DaemonUri">
            <summary>
            Gets or sets the Docker daemon URL to connect to. The default is localhost using a platform-appropriate
            transport.
            </summary>
        </member>
        <member name="P:DockerSdk.ClientOptions.DefaultTimeout">
            <summary>
            Gets or sets how long the SDK should wait for responses to messages it sends to the Docker daemon.
            </summary>
            <remarks>Some SDK methods override this value.</remarks>
        </member>
        <member name="P:DockerSdk.ClientOptions.UseTls">
            <summary>
            Gets or sets a value indicating whether to use <a
            href="https://en.wikipedia.org/wiki/Transport_Layer_Security">TLS</a> for communications with the daemon.
            Defaults to <see langword="true"/>.
            </summary>
        </member>
        <member name="M:DockerSdk.ClientOptions.FromEnvironment">
            <summary>
            Generates a <see cref="T:DockerSdk.ClientOptions"/> object based on the local machine's <a
            href="https://en.wikipedia.org/wiki/Environment_variable">environment variables</a>.
            </summary>
            <returns>The generated <see cref="T:DockerSdk.ClientOptions"/>.</returns>
            <remarks>
            If any of the relevant environment variables are not set, the <see cref="T:DockerSdk.ClientOptions"/> object will use
            the default value for its corresponding property. Note that the default for <see cref="P:DockerSdk.ClientOptions.DaemonUri"/>/
            <c>DOCKER_HOST</c> is not valid for connecting to a Docker daemon. <br/> This method uses the following
            environment variables:
            <list type="bullet">
            <item>
            <c>DOCKER_HOST</c>: The URL for the Docker daemon to connect to. Corresponds to the <see cref="P:DockerSdk.ClientOptions.DaemonUri"/>
            property.
            </item>
            <item>
            <c>DOCKER_CERT_PATH</c>: A filesystem path to read certificates from. Corresponds to the <see
            cref="P:DockerSdk.ClientOptions.Certificates"/> property.
            </item>
            <item>
            <c>DOCKER_TLS_VERIFY</c>: If set, the connection will use TLS. Corresponds to the <see cref="P:DockerSdk.ClientOptions.UseTls"/>
            property.
            </item>
            <item>
            <c>COMPOSER_HTTP_TIMEOUT</c>: The communications timeout to use, in seconds. Corresponds to the <see
            cref="P:DockerSdk.ClientOptions.DefaultTimeout"/> property.
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:DockerSdk.ClientOptions.ToCore">
            <summary>
            Creates a client configuration object for use by the underlying .NET Docker API.
            </summary>
            <returns>An equivalent <see cref="T:Docker.DotNet.DockerClientConfiguration"/> object.</returns>
        </member>
        <member name="T:DockerSdk.DaemonNotFoundException">
            <summary>
            Indicates that the Docker daemon is not present or not running.
            </summary>
        </member>
        <member name="M:DockerSdk.DaemonNotFoundException.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:DockerSdk.DaemonNotFoundException.#ctor(System.String)">
            <summary>
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:DockerSdk.DaemonNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            </summary>
            <param name="message"></param>
            <param name="inner"></param>
        </member>
        <member name="M:DockerSdk.DaemonNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:DockerSdk.DockerClient">
            <summary>
            Provides remote access to a Docker daemon.
            </summary>
        </member>
        <member name="P:DockerSdk.DockerClient.ApiVersion">
            <summary>
            Gets the version of the Docker API that will be used to communicate with the Docker daemon.
            </summary>
            <remarks>This will always be the highest version that both sides support.</remarks>
        </member>
        <member name="P:DockerSdk.DockerClient.Registries">
            <summary>
            Provides access to functionality related to Docker registries.
            </summary>
        </member>
        <member name="P:DockerSdk.DockerClient.Core">
            <summary>
            Gets the core client, which is what does all the heavy lifting for communicating with the Docker daemon.
            </summary>
        </member>
        <member name="F:DockerSdk.DockerClient._libraryMaxApiVersion">
            <summary>
            The minimum Docker API version that the SDK supports.
            </summary>
        </member>
        <member name="F:DockerSdk.DockerClient._libraryMinApiVersion">
            <summary>
            The maximum Docker API version that the SDK supports.
            </summary>
        </member>
        <member name="M:DockerSdk.DockerClient.StartAsync(System.Threading.CancellationToken)">
            <summary>
            Creates a new Docker client and connects it to the local Docker daemon.
            </summary>
            <param name="ct">A token used to cancel the operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the connection has been established.</returns>
            <exception cref="T:DockerSdk.DockerVersionException">
            The API versions that the SDK supports don't overlap with the API versions that the daemon supports.
            </exception>
            <exception cref="T:Docker.DotNet.DockerApiException">An internal error occurred within the daemon.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">
            The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate
            validation, or timeout.
            </exception>
        </member>
        <member name="M:DockerSdk.DockerClient.StartAsync(System.Uri,System.Threading.CancellationToken)">
            <summary>
            Creates a new Docker client and connects it to a Docker daemon.
            </summary>
            <param name="daemonUrl">The URL of the Docker daemon to connect to.</param>
            <param name="ct">A token used to cancel the operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the connection has been established.</returns>
            <exception cref="T:DockerSdk.DockerVersionException">
            The API versions that the SDK supports don't overlap with the API versions that the daemon supports.
            </exception>
            <exception cref="T:Docker.DotNet.DockerApiException">An internal error occurred within the daemon.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">
            The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate
            validation, or timeout.
            </exception>
            <exception cref="T:System.ArgumentException">The URL is <see langword="null"/>.</exception>
        </member>
        <member name="M:DockerSdk.DockerClient.StartAsync(DockerSdk.ClientOptions,System.Threading.CancellationToken)">
            <summary>
            Creates a new Docker client and connects it to a Docker daemon.
            </summary>
            <param name="options">Details on how to connect and how the client should behave.</param>
            <param name="ct">A token used to cancel the operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the connection has been established.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="options"/> is <see langword="null"/>.</exception>
            <exception cref="T:DockerSdk.DockerVersionException">
            The API versions that the SDK supports don't overlap with the API versions that the daemon supports.
            </exception>
            <exception cref="T:Docker.DotNet.DockerApiException">An internal error occurred within the daemon.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">
            The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate
            validation, or timeout.
            </exception>
            <exception cref="T:DockerSdk.DaemonNotFoundException">There is no running Docker daemon at the specified URL.</exception>
        </member>
        <member name="M:DockerSdk.DockerClient.DetermineVersionToUse(System.Version,Docker.DotNet.Models.VersionResponse,System.Version)">
            <summary>
            Determines which API version to use for communications between the SDK and the Docker daemon, or throws an
            exception if there's no acceptable answer.
            </summary>
            <param name="libraryMin">The lowest API version that the SDK supports.</param>
            <param name="daemonInfo">Information about what versions the daemon supports.</param>
            <param name="libraryMax">The highest API version that the SDK supports.</param>
            <returns>The API version to use.</returns>
            <exception cref="T:DockerSdk.DockerVersionException">
            There's no overlap between what the two sides can accept.
            </exception>
        </member>
        <member name="M:DockerSdk.DockerClient.RequireApiVersion(System.String,System.String)">
            <summary>
            Throws an exception if the negotiated API version is not in the expected range.
            </summary>
            <param name="minVersion">The minimum allowed API version, in MAJOR.MINOR format.</param>
            <param name="maxVersion">
            The maximum allowed API version, in MAJOR.MINOR format, or <see langword="null"/> for no upper limit.
            </param>
            <exception cref="T:System.NotSupportedException">The negotiated API version is not in the expected range.</exception>
            <exception cref="T:System.ObjectDisposedException">This object has been disposed.</exception>
            <seealso cref="P:DockerSdk.DockerClient.ApiVersion"/>
        </member>
        <member name="M:DockerSdk.DockerClient.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:DockerSdk.DockerClient.Dispose(System.Boolean)">
            <summary>
            Overridable Dispose method
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:DockerSdk.DockerException">
            <summary>
            Base class for exceptions that are specific to the Docker client's functionality.
            </summary>
        </member>
        <member name="M:DockerSdk.DockerException.#ctor">
            <summary>
            Creates of instance of the DockerException type.
            </summary>
        </member>
        <member name="M:DockerSdk.DockerException.#ctor(System.String)">
            <summary>
            Creates of instance of the DockerException type.
            </summary>
        </member>
        <member name="M:DockerSdk.DockerException.#ctor(System.String,System.Exception)">
            <summary>
            Creates of instance of the DockerException type.
            </summary>
        </member>
        <member name="M:DockerSdk.DockerException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates of instance of the DockerException type.
            </summary>
        </member>
        <member name="M:DockerSdk.DockerException.Wrap(Docker.DotNet.DockerApiException)">
            <summary>
            Creates a friendlier exception from an exception generated by the core API.
            </summary>
            <param name="ex">The exception from the core API.</param>
            <returns>The wrapper exception.</returns>
        </member>
        <member name="T:DockerSdk.DockerVersionException">
            <summary>
            Indicates that API version negotiation failed because there is no overlap between the versions that the SDK
            supports with the versions the Docker daemon supports.
            </summary>
        </member>
        <member name="M:DockerSdk.DockerVersionException.#ctor">
            <summary>
            Creates an instance of the DockerVersionException type.
            </summary>
        </member>
        <member name="M:DockerSdk.DockerVersionException.#ctor(System.String)">
            <summary>
            Creates an instance of the DockerVersionException type.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:DockerSdk.DockerVersionException.#ctor(System.String,System.Exception)">
            <summary>
            Creates an instance of the DockerVersionException type.
            </summary>
            <param name="message"></param>
            <param name="inner"></param>
        </member>
        <member name="M:DockerSdk.DockerVersionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates an instance of the DockerVersionException type.
            </summary>
        </member>
        <member name="T:DockerSdk.Registries.RegistryAccess">
            <summary>
            Caches credentials for Docker registries and provides a means to check the credentials against the registry.
            </summary>
        </member>
        <member name="P:DockerSdk.Registries.RegistryAccess.Registries">
            <summary>
            Gets the Docker registries that have cache entries.
            </summary>
        </member>
        <member name="M:DockerSdk.Registries.RegistryAccess.AddAnonymous(System.String)">
            <summary>
            Specifies that you want to use anonymous access to the indicated registry.
            </summary>
            <param name="registry">The name of the registry, as used in image names.</param>
            <exception cref="T:System.ArgumentException">The input is null, empty, or malformatted.</exception>
        </member>
        <member name="M:DockerSdk.Registries.RegistryAccess.AddBasicAuth(System.String,System.String,System.String)">
            <summary>
            Specifies that you want to use <a href="https://en.wikipedia.org/wiki/Basic_access_authentication">basic
            authentication</a> for access to the indicated registry.
            </summary>
            <param name="registry">The name of the registry, as used in image names.</param>
            <param name="username">The username to use for the registry.</param>
            <param name="password">The password to use for the registry.</param>
            <exception cref="T:System.ArgumentException">
            The registry input is null, empty, or malformatted; or the username or password are null or empty.
            </exception>
        </member>
        <member name="M:DockerSdk.Registries.RegistryAccess.AddIdentityToken(System.String,System.String)">
            <summary>
            Specifies that you want to use an identity token for authenticating with the indicated registry.
            </summary>
            <param name="registry">The name of the registry, as used in image names.</param>
            <param name="identityToken">An identity token granted by the registry.</param>
            <exception cref="T:System.ArgumentException">
            The registry input is null, empty, or malformatted; or the identity token is null or empty.
            </exception>
        </member>
        <member name="M:DockerSdk.Registries.RegistryAccess.CheckAuthenticationAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Tests whether the client can authenticate with the indicated registry.
            </summary>
            <param name="registry"></param>
            <param name="ct"></param>
            <returns></returns>
            <remarks>
            Use the various <c>Add</c>* methods to supply authentication instructions. If no such instructions are
            provided, this method will try anonymous access.
            </remarks>
            <exception cref="T:System.ArgumentException">The registry input is null, empty, or malformatted.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">
            The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate
            validation, or timeout.
            </exception>
        </member>
        <member name="M:DockerSdk.Registries.RegistryAccess.Clear">
            <summary>
            Removes all custom registry entries.
            </summary>
        </member>
        <member name="M:DockerSdk.Registries.RegistryAccess.GetRegistryName(System.String)">
            <summary>
            Parses an image's name to determine which registry the image is associated with.
            </summary>
            <param name="imageName">The name of image. (Not the ID.)</param>
            <returns>The registry hostname, possibly including a port.</returns>
        </member>
        <member name="M:DockerSdk.Registries.RegistryAccess.Remove(System.String)">
            <summary>
            Removes an entry from the cache.
            </summary>
            <param name="registry">The host name of the registry to remove.</param>
            <returns>True if the entry was removed, or false if the entry was not present.</returns>
            <remarks>This method is equivalent to <c>docker logout</c>.</remarks>
        </member>
        <member name="M:DockerSdk.Registries.RegistryAccess.TryGetAuthObject(System.String,Docker.DotNet.Models.AuthConfig@)">
            <summary>
            Attempts to get the auth information for the given registry.
            </summary>
            <param name="registry">The name of the registry to retrieve information about.</param>
            <param name="authObject"></param>
        </member>
        <member name="T:DockerSdk.Registries.RegistryEntry">
            <summary>
            Holds authentication information for a Docker registry.
            </summary>
        </member>
        <member name="P:DockerSdk.Registries.RegistryEntry.AuthObject">
            <summary>
            Gets or sets the auth object that the core API uses for authentication.
            </summary>
        </member>
        <member name="M:DockerSdk.Registries.RegistryEntry.Decode(System.String)">
            <summary>
            De-obfuscates an auth object.
            </summary>
            <param name="codedForm">An obsfucated, serialized form of the given auth details.</param>
            <returns>An object holding the auth details.</returns>
        </member>
        <member name="M:DockerSdk.Registries.RegistryEntry.Encode(Docker.DotNet.Models.AuthConfig)">
            <summary>
            Obsfucates the auth object. This doesn't add much real security, but at least the passwords won't be plainly
            visible in memory dumps.
            </summary>
            <param name="auth">An object holding the auth details.</param>
            <returns>An obsfucated, serialized form of the given auth details.</returns>
        </member>
    </members>
</doc>
